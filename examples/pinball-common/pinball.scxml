<?xml version="1.0" ?>
<scxml xmlns="http://www.w3.org/2005/07/scxml" version="1.0"
       name="Pinball">
    <parallel id="global">
        <parallel id="internalState">
            <parallel id="logicalState">
                <state id="letterState">
                    <parallel id="lettersState">
                        <state id="cState" initial="cLetterOff">
                            <state id="cLetterOff">
                                <transition event="letterTriggered.C" cond="In(onState)" target="cLetterOn"/>
                            </state>
                            <final id="cLetterOn">
                                <onentry>
                                    <raise event="letterOn"/>
                                </onentry>
                            </final>
                        </state>
                        <state id="rState" initial="rLetterOff">
                            <state id="rLetterOff">
                                <transition event="letterTriggered.R" cond="In(onState)" target="rLetterOn"/>
                            </state>
                            <final id="rLetterOn">
                                <onentry>
                                    <raise event="letterOn"/>
                                </onentry>
                            </final>
                        </state>
                        <state id="aState" initial="aLetterOff">
                            <state id="aLetterOff">
                                <transition event="letterTriggered.A" cond="In(onState)" target="aLetterOn"/>
                            </state>
                            <final id="aLetterOn">
                                <onentry>
                                    <raise event="letterOn"/>
                                </onentry>
                            </final>
                        </state>
                        <state id="zState" initial="zLetterOff">
                            <state id="zLetterOff">
                                <transition event="letterTriggered.Z" cond="In(onState)" target="zLetterOn"/>
                            </state>
                            <final id="zLetterOn">
                                <onentry>
                                    <raise event="letterOn"/>
                                </onentry>
                            </final>
                        </state>
                        <state id="yState" initial="yLetterOff">
                            <state id="yLetterOff">
                                <transition event="letterTriggered.Y" cond="In(onState)" target="yLetterOn"/>
                            </state>
                            <final id="yLetterOn">
                                <onentry>
                                    <raise event="letterOn"/>
                                </onentry>
                            </final>
                        </state>
                    </parallel>
                    <transition event="resetLetters" target="lettersState" type="internal"/>
                </state>
                <state id="modeState" initial="offState">
                    <state id="offState">
                        <onentry>
                            <raise event="resetLetters"/>
                            <raise event="resetJackpot"/>
                            <raise event="update"/>
                        </onentry>
                        <transition event="startTriggered" target="normalState"/>
                    </state>
                    <state id="onState">
                        <state id="normalState">
                            <onentry>
                                <raise event="resetLetters"/>
                                <raise event="update"/>
                            </onentry>
                            <transition event="goToHurry" target="hurryState"/>
                        </state>
                        <state id="hurryState">
                            <onentry>
                                <send event="hurryTimeout" id="hurried" delay="5s"/>
                                <raise event="resetLetters"/>
                                <raise event="update"/>
                            </onentry>
                            <transition event="goToNormal" target="normalState"/>
                            <transition event="hurryTimeout" target="normalState"/>
                            <onexit>
                                <cancel sendid="hurried"/>
                            </onexit>
                        </state>
                    </state>
                </state>
                <state id="jackpotState" initial="jackpotStateOff">
                    <state id="jackpotStateOff">
                        <onentry>
                            <raise event="update"/>
                        </onentry>
                        <transition event="goForJackpot" target="jackpotStateOn"/>
                    </state>
                    <state id="jackpotStateOn">
                        <onentry>
                            <raise event="update"/>
                        </onentry>
                        <transition event="resetJackpot" target="jackpotStateOff"/>
                    </state>
                </state>
            </parallel>

            <state id="workflow">

                <state id="lightImpulseGenerator">
                    <state id="lightImpulseOn"/>
                    <state id="lightImpulseOff"/>

                    <onentry>
                        <raise event="updateLights"/>
                        <raise event="scheduleNewImpulse"/>
                    </onentry>

                    <transition event="scheduleNewImpulse">
                        <cancel sendid="delayed"/>
                        <if cond="In(offState)">
                            <send event="lightImpulse" id="delayed" delay="1s"/>
                        <elseif cond="In(normalState)"/>
                            <send event="lightImpulse" id="delayed" delay="500ms"/>
                        <else/>
                            <send event="lightImpulse" id="delayed" delay="200ms"/>
                        </if>
                    </transition>

                    <onexit>
                        <cancel sendid="delayed"/>
                    </onexit>

                    <transition event="lightImpulse" cond="In(lightImpulseOn)" target="lightImpulseOff"/>
                    <transition event="lightImpulse" cond="In(lightImpulseOff)" target="lightImpulseOn"/>
                </state>

                <transition event="letterOn">
                    <raise event="updateLights"/>
                </transition>

                <transition event="done.state.lettersState">
                    <if cond="In(normalState)">
                        <raise event="goToHurry"/>
                    <elseif cond="In(hurryState)"/>
                        <raise event="goToNormal"/>
                        <raise event="goForJackpot"/>
                    </if>
                </transition>

                <transition event="update">
                    <raise event="scheduleNewImpulse"/>
                    <raise event="updateLights"/>
                </transition>

                <transition event="updateLights">
                    <if cond="In(jackpotStateOn)">
                        <raise event="turnOnJackpot"/>
                    <else/>
                        <raise event="turnOffJackpot"/>
                    </if>

                    <if cond="In(lightImpulseOn)">
                        <if cond="In(offState)">
                            <raise event="turnOnC"/>
                            <raise event="turnOnR"/>
                            <raise event="turnOnA"/>
                            <raise event="turnOnZ"/>
                            <raise event="turnOnY"/>
                            <raise event="turnOnHurry"/>
                            <raise event="turnOnJackpot"/>
                        <elseif cond="In(normalState)"/>
                            <if cond="In(cLetterOn)">
                                <raise event="turnOnC"/>
                            <else/>
                                <raise event="turnOffC"/>
                            </if>
                            <if cond="In(rLetterOn)">
                                <raise event="turnOnR"/>
                            <else/>
                                <raise event="turnOffR"/>
                            </if>
                            <if cond="In(aLetterOn)">
                                <raise event="turnOnA"/>
                            <else/>
                                <raise event="turnOffA"/>
                            </if>
                            <if cond="In(zLetterOn)">
                                <raise event="turnOnZ"/>
                            <else/>
                                <raise event="turnOffZ"/>
                            </if>
                            <if cond="In(yLetterOn)">
                                <raise event="turnOnY"/>
                            <else/>
                                <raise event="turnOffY"/>
                            </if>
                            <raise event="turnOffHurry"/>
                        <else/>
                            <raise event="turnOnC"/>
                            <raise event="turnOnR"/>
                            <raise event="turnOnA"/>
                            <raise event="turnOnZ"/>
                            <raise event="turnOnY"/>
                            <raise event="turnOnHurry"/>
                        </if>
                    <else/>
                        <if cond="In(offState)">
                            <raise event="turnOffC"/>
                            <raise event="turnOffR"/>
                            <raise event="turnOffA"/>
                            <raise event="turnOffZ"/>
                            <raise event="turnOffY"/>
                            <raise event="turnOffHurry"/>
                            <raise event="turnOffJackpot"/>
                        <elseif cond="In(normalState)"/>
                            <raise event="turnOffC"/>
                            <raise event="turnOffR"/>
                            <raise event="turnOffA"/>
                            <raise event="turnOffZ"/>
                            <raise event="turnOffY"/>
                        <else/>
                            <if cond="In(cLetterOn)">
                                <raise event="turnOnC"/>
                            <else/>
                                <raise event="turnOffC"/>
                            </if>
                            <if cond="In(rLetterOn)">
                                <raise event="turnOnR"/>
                            <else/>
                                <raise event="turnOffR"/>
                            </if>
                            <if cond="In(aLetterOn)">
                                <raise event="turnOnA"/>
                            <else/>
                                <raise event="turnOffA"/>
                            </if>
                            <if cond="In(zLetterOn)">
                                <raise event="turnOnZ"/>
                            <else/>
                                <raise event="turnOffZ"/>
                            </if>
                            <if cond="In(yLetterOn)">
                                <raise event="turnOnY"/>
                            <else/>
                                <raise event="turnOffY"/>
                            </if>
                        </if>
                        <raise event="turnOffHurry"/>
                    </if>
                </transition>

            </state>

            <transition event="ballOutTriggered" cond="In(onState)" target="offState"/>
        </parallel>

        <parallel id="guiControl">
            <state id="cLight">
                <state id="cLightOn">
                    <transition event="turnOffC" target="cLightOff"/>
                </state>
                <state id="cLightOff">
                    <transition event="turnOnC" target="cLightOn"/>
                </state>
            </state>
            <state id="rLight">
                <state id="rLightOn">
                    <transition event="turnOffR" target="rLightOff"/>
                </state>
                <state id="rLightOff">
                    <transition event="turnOnR" target="rLightOn"/>
                </state>
            </state>
            <state id="aLight">
                <state id="aLightOn">
                    <transition event="turnOffA" target="aLightOff"/>
                </state>
                <state id="aLightOff">
                    <transition event="turnOnA" target="aLightOn"/>
                </state>
            </state>
            <state id="zLight">
                <state id="zLightOn">
                    <transition event="turnOffZ" target="zLightOff"/>
                </state>
                <state id="zLightOff">
                    <transition event="turnOnZ" target="zLightOn"/>
                </state>
            </state>
            <state id="yLight">
                <state id="yLightOn">
                    <transition event="turnOffY" target="yLightOff"/>
                </state>
                <state id="yLightOff">
                    <transition event="turnOnY" target="yLightOn"/>
                </state>
            </state>
            <state id="hurryLight">
                <state id="hurryLightOn">
                    <transition event="turnOffHurry" target="hurryLightOff"/>
                </state>
                <state id="hurryLightOff">
                    <transition event="turnOnHurry" target="hurryLightOn"/>
                </state>
            </state>
            <state id="jackpotLight">
                <state id="jackpotLightOn">
                    <transition event="turnOffJackpot" target="jackpotLightOff"/>
                </state>
                <state id="jackpotLightOff">
                    <transition event="turnOnJackpot" target="jackpotLightOn"/>
                </state>
            </state>
        </parallel>
    </parallel>
</scxml>
