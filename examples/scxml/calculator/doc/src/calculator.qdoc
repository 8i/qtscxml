/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example calculator
    \title Qt SCXML Calculator Example
    \ingroup examples-qtscxml

    \image calculator.png

    \brief Implements the Calculator example presented in the SCXML
    Specification.

    \e {Calculator} uses Qt SCXML to implement the
    \l{SCXML Specification - Calculator Example}{Calculator Example}
    presented in the SCXML Specification.

    The state machine is specified in the \e calculator.scxml file and compiled
    into the \c Calculator class. The user interface is created using
    Qt Widgets.

    \include examples-run.qdocinc

    \section1 Compiling the State Machine

    We link against the Qt SCXML module by adding the following line to the
    \e calculator.pro file:

    \quotefromfile calculator/calculator.pro
    \printuntil scxml

    We then specify the state machine to compile:

    \skipto STATECHARTS
    \printline calculator

    We also tell qmake to run \c qscxmlc, which generates \e calculator.h and
    \e calculator.cpp, and adds them to the \c HEADERS and \c SOURCES variables
    for compilation:

    \skipto load
    \printline qscxmlc

    \section1 Instantiating the State Machine

    We instantiate the generated \c Calculator class in the \e main.cpp file, as
    follows:

    \quotefromfile calculator/main.cpp
    \skipto #include
    \printuntil }

    \section1 Connecting to Active Properties

    After instantiating the state machine, we can connect to the active
    properties of the states, as follows:

    \quotefromfile calculator/mainwindow.cpp
    \skipto connect
    \printuntil digit2
    \printuntil }

    To be notified when a state machine sends out an event, we connect to the
    corresponding signal:

    \skipto eventOccurred
    \printuntil });
*/
